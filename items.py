import random

# --- Classe de base pour tous les objets ---
class Item:
    def __init__(self, nom):
        # Chaque objet poss√®de un nom (ex : Potion, Pok√© Ball, etc.)
        self.nom = nom

    # M√©thode √† red√©finir dans les sous-classes
    def utiliser(self, pokemon=None, inventaire=None):
        pass


# --- Potion ---
class Potion(Item):
    def __init__(self):
        # Le nom de l'objet est "Potion"
        super().__init__("Potion")

    # Utilisation d'une potion sur un Pok√©mon
    def utiliser(self, pokemon, inventaire):
        # On v√©rifie que le Pok√©mon n‚Äôest pas K.O.
        if not pokemon.est_vivant():
            print(f"{pokemon.nom} est K.O., tu ne peux pas utiliser une Potion.")
            return False

        # Si le Pok√©mon n‚Äôest pas √† 100% de ses PV, on le soigne
        if pokemon.soigner(20):
            print(f"{pokemon.nom} r√©cup√®re 20 PV ! ({pokemon.pv}/{pokemon.pv_max})")
            inventaire.remove(self)  # On retire la potion de l‚Äôinventaire
            return True
        else:
            print(f"{pokemon.nom} est d√©j√† au maximum de ses PV.")
            return False


# --- Super Potion ---
class SuperPotion(Item):
    def __init__(self):
        # Le nom de l'objet est "Super Potion"
        super().__init__("Super Potion")

    def utiliser(self, pokemon, inventaire):
        if not pokemon.est_vivant():
            print(f"{pokemon.nom} est K.O., tu ne peux pas utiliser une Super Potion.")
            return False

        # Soigne 50 PV au lieu de 20
        if pokemon.soigner(50):
            print(f"{pokemon.nom} r√©cup√®re 50 PV ! ({pokemon.pv}/{pokemon.pv_max})")
            inventaire.remove(self)
            return True
        else:
            print(f"{pokemon.nom} est d√©j√† au maximum de ses PV.")
            return False


# --- Rappel (Revive) ---
class Revive(Item):
    def __init__(self):
        # Le nom de l'objet est "Rappel"
        super().__init__("Rappel")

    def utiliser(self, pokemon, inventaire):
        # Si le Pok√©mon est d√©j√† vivant, inutile de l‚Äôutiliser
        if pokemon.est_vivant():
            print(f"{pokemon.nom} n‚Äôa pas besoin de Rappel.")
            return False

        # R√©anime le Pok√©mon √† 50% de ses PV max
        pokemon.pv = pokemon.pv_max // 2
        print(f"{pokemon.nom} est r√©anim√© √† {pokemon.pv} PV !")
        inventaire.remove(self)
        return True


# --- Pok√© Ball ---
class PokeBall(Item):
    def __init__(self):
        # Le nom de l'objet est "Pok√© Ball"
        super().__init__("Pok√© Ball")

    def utiliser(self, cible, inventaire):
        # Lancer d‚Äôune Pok√© Ball sur un Pok√©mon sauvage
        print(f"Tu lances une Pok√© Ball sur {cible.nom}...")
        chance_capture = random.random()  # Nombre al√©atoire entre 0 et 1
        inventaire.remove(self)  # Retire la Pok√© Ball du sac

        # 50% de chance de capturer le Pok√©mon
        if chance_capture < 0.5:
            print(f"‚ú® {cible.nom} est captur√© !")
            return True
        else:
            print(f"{cible.nom} s‚Äôest √©chapp√© de la Pok√© Ball !")
            return False


# --- Fonction d'affichage de l'inventaire ---
def afficher_inventaire(inventaire):
    # Si le sac est vide, on le dit clairement
    if not inventaire:
        print("\nTon sac est vide.")
        return

    print("\nüéí Inventaire :")
    compteur = {}

    # On compte combien d‚Äôobjets de chaque type le joueur poss√®de
    for item in inventaire:
        compteur[item.nom] = compteur.get(item.nom, 0) + 1

    # On affiche le contenu de l‚Äôinventaire
    for nom, qte in compteur.items():
        print(f"- {nom} x{qte}")
