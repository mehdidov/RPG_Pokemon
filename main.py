from pokemon import Pokemon, PokemonFeu, PokemonEau, PokemonPlante
from combat import lancer_combat
from arene import Arene, CombattantArene
from items import Potion, SuperPotion, Revive, PokeBall
import random

# ---------------------------------
# INVENTAIRE INITIAL DU JOUEUR
# ---------------------------------
inventaire = []

# Ajoute 7 Potions
for i in range(7):
    inventaire.append(Potion())

# Ajoute 3 Super Potions
for i in range(3):
    inventaire.append(SuperPotion())

# Ajoute 1 Rappel
inventaire.append(Revive())

# Ajoute 15 Pok√© Balls par d√©faut
for i in range(15):
    inventaire.append(PokeBall())


def afficher_inventaire(inventaire):
    if not inventaire:
        print("\nTon sac est vide.")
        return

    print("\nüéí Inventaire :")
    compteur = {}
    for item in inventaire:
        compteur[item.nom] = compteur.get(item.nom, 0) + 1

    for nom, quantite in compteur.items():
        print(f"- {nom} x{quantite}")


# ---------------------------------
# AIDES
# ---------------------------------
def creer_arene_feu():
    dresseurs_feu = [
        CombattantArene("Steven", Pokemon("Caninos", "Feu", 42, [("Charge", 10), ("Crocs Feu", 13), ("Flamm√®che", 12), ("B√©lier", 15)])),
        CombattantArene("Aulne", Pokemon("Goupix", "Feu", 43, [("Flamm√®che", 12), ("Rugissement", 0), ("Lance-Flamme", 18), ("Queue de Fer", 14)])),
        CombattantArene("Cynthia", Pokemon("Magby", "Feu", 44, [("Poing Feu", 15), ("Crocs Feu", 14), ("Jet de Flamme", 18), ("Charge", 10)])),
        CombattantArene("Cendre", Pokemon("Salam√®che", "Feu", 45, [("Griffe", 10), ("Flamm√®che", 12), ("Crocs Feu", 14), ("Lance-Flamme", 18)])),
        CombattantArene("Rouge le Champion", Pokemon("Simiabraz", "Feu", 47, [("Roue de Feu", 20), ("Poing Feu", 18), ("Lame de Roc", 16), ("Mach Punch", 14)]))
    ]
    return Arene("Ar√®ne Pyronis", "Feu", "Badge Flamme", dresseurs_feu)


def creer_arene_plante():
    dresseurs_plante = [
        CombattantArene("Violaine", Pokemon("Germignon", "Plante", 48, [("Charge", 10), ("Fouet Lianes", 12), ("Tranch‚ÄôHerbe", 15), ("Vampigraine", 0)])),
        CombattantArene("Th√©o", Pokemon("Ch√©tiflor", "Plante", 49, [("Fouet Lianes", 12), ("Tranch‚ÄôHerbe", 14), ("Tranch‚ÄôFeuille", 16), ("Canon Graine", 15)])),
        CombattantArene("Flora", Pokemon("Ortide", "Plante", 50, [("Poudre Dodo", 0), ("Acide", 12), ("Tranch‚ÄôHerbe", 16), ("Giga-Sangsue", 18)])),
        CombattantArene("L√©a", Pokemon("Ros√©lia", "Plante", 51, [("M√©ga-Sangsue", 16), ("Tranch‚ÄôHerbe", 16), ("Canon Graine", 17), ("Dard-Venin", 12)])),
        CombattantArene("Erable la Championne", Pokemon("Empiflor", "Plante", 53, [("Tranch‚ÄôFeuille", 18), ("Canon Graine", 18), ("Vampigraine", 0), ("M√©gafouet", 20)])),
    ]
    return Arene("Ar√®ne Verdania", "Plante", "Badge Verdure", dresseurs_plante)


def creer_arene_eau():
    dresseurs_eau = [
        CombattantArene("Nilo", Pokemon("T√™tarte", "Eau", 54, [("√âcume", 12), ("Pistolet √† O", 14), ("Bulles d‚ÄôO", 16), ("Hypnose", 0)])),
        CombattantArene("Ondine Jr", Pokemon("Stari", "Eau", 55, [("Pistolet √† O", 14), ("Bulles d‚ÄôO", 16), ("Tour Rapide", 12), ("Rayon Gemme", 18)])),
        CombattantArene("Mira", Pokemon("Krabby", "Eau", 56, [("Bulles d‚ÄôO", 16), ("Pince-Masse", 18), ("Coup d‚ÄôBoule", 14), ("√âcume", 12)])),
        CombattantArene("Soren", Pokemon("Psykokwak", "Eau", 57, [("Pistolet √† O", 16), ("Hydroqueue", 20), ("Coup de T√™te", 14), ("Amn√©sie", 0)])),
        CombattantArene("Hydra la Championne", Pokemon("Lokhlass", "Eau", 60, [("Surf", 22), ("Hydroqueue", 20), ("Grincement", 0), ("Laser Glace", 22)])),
    ]
    return Arene("Ar√®ne Hydrolys", "Eau", "Badge Cascade", dresseurs_eau)


def pool_sauvage_etape(etape):
    """
    etape:
      0 -> avant l'Ar√®ne Feu (donner un avantage contre Feu) => +Eau
      1 -> avant l'Ar√®ne Plante (donner un avantage contre Plante) => +Feu
     2+ -> avant l'Ar√®ne Eau (donner un avantage contre Eau) => +Plante
    """
    if etape == 0:
        return [
            Pokemon("Psykokwak", "Eau", 40, [("Pistolet √† O", 10), ("Coup de t√™te", 11), ("Bec Vrille", 13), ("Hydroqueue", 15)]),
            Pokemon("Carapuce", "Eau", 41, [("√âcume", 10), ("Pistolet √† O", 12), ("Coup de Queue", 14), ("Hydroqueue", 16)]),
            Pokemon("Evoli", "Normal", 40, [("Charge", 8), ("Morsure", 10), ("Coup d‚ÄôBoule", 12), ("Vive-Attaque", 14)]),
        ]
    elif etape == 1:
        return [
            Pokemon("Caninos", "Feu", 44, [("Charge", 10), ("Crocs Feu", 14), ("Flamm√®che", 12), ("B√©lier", 15)]),
            Pokemon("Goupix", "Feu", 44, [("Flamm√®che", 12), ("Rugissement", 0), ("Lance-Flamme", 18), ("Queue de Fer", 14)]),
            Pokemon("Roucool", "Normal", 43, [("Tornade", 12), ("Cru-Aile", 14), ("Vive-Attaque", 14), ("Jet de Sable", 0)]),  # Vol (type non g√©r√© mais ok en "Normal" ici)
        ]
    else:
        return [
            Pokemon("Ch√©tiflor", "Plante", 48, [("Fouet Lianes", 12), ("Tranch‚ÄôHerbe", 14), ("Tranch‚ÄôFeuille", 16), ("Canon Graine", 16)]),
            Pokemon("Mystherbe", "Plante", 49, [("Poudre Dodo", 0), ("M√©ga-Sangsue", 16), ("Tranch‚ÄôHerbe", 16), ("Acide", 12)]),
            Pokemon("Bulbizarre", "Plante", 50, [("Fouet Lianes", 12), ("Tranch‚ÄôHerbe", 14), ("Canon Graine", 16), ("Vampigraine", 0)]),
        ]


# ---------------------------------
# CHOIX DU DRESSEUR
# ---------------------------------
print("MINI JEU POK√âMON ")

dresseurs = ["Sacha", "Pierre", "Mehdi", "Iris"]

while True:
    print("\nChoisis ton dresseur :")
    for i, nom in enumerate(dresseurs, 1):
        print(f"{i}. {nom}")

    choix = input("-> ").strip()

    if choix.isdigit():
        index = int(choix) - 1
        if 0 <= index < len(dresseurs):
            dresseur = dresseurs[index]
            break
        else:
            print("Num√©ro invalide, r√©essaie.")
    elif choix.lower() in [n.lower() for n in dresseurs]:
        for nom in dresseurs:
            if nom.lower() == choix.lower():
                dresseur = nom
                break
        break
    else:
        print("Nom invalide, r√©essaie.")

print(f"\nBienvenue {dresseur} ! Ton aventure commence maintenant.")

# ---------------------------------
# CHOIX DU STARTER
# ---------------------------------
print("\nC‚Äôest le moment de choisir ton premier Pok√©mon !")
print("1. Poussifeu (Feu)")
print("2. Grenouss (Eau)")
print("3. Bulbizarre (Plante)")

while True:
    choix_pokemon = input("-> ").lower()
    if choix_pokemon in ["1", "poussifeu"]:
        pokemon = PokemonFeu()
        break
    elif choix_pokemon in ["2", "grenouss"]:
        pokemon = PokemonEau()
        break
    elif choix_pokemon in ["3", "bulbizarre"]:
        pokemon = PokemonPlante()
        break
    else:
        print("Choix invalide. Essaie encore !")

print(f"\nTu as choisi {pokemon.nom} ({pokemon.type}) !")

# ---------------------------------
# √âTAT D‚ÄôAVANCEMENT
# ---------------------------------
equipe = [pokemon]

# etape 0 = avant ar√®ne Feu ; 1 = avant ar√®ne Plante ; 2 = avant ar√®ne Eau ; 3 = toutes faites
etape = 0
explorations = 0

# ar√®nes disponibles selon l‚Äô√©tape
def arene_disponible_nom(etape):
    if etape == 0:
        return None  # pas encore Pyronis
    elif etape == 1:
        return "Ar√®ne Pyronis"
    elif etape == 2:
        return "Ar√®ne Verdania"
    elif etape == 3:
        return "Ar√®ne Hydrolys"
    else:
        return None

def afficher_menu(etape):
    print("\nQue veux-tu faire ?")
    print("1. Explorer la route")
    print("2. Voir ton √©quipe")
    print("3. Voir ton inventaire")
    print("4. Utiliser un objet")

    nom_arene = arene_disponible_nom(etape)
    if nom_arene is None:
        print("5. Quitter le jeu")
    else:
        print(f"5. Aller √† {nom_arene}")
        print("6. Quitter le jeu")


# ---------------------------------
# BOUCLE PRINCIPALE DU JEU
# ---------------------------------
while True:
    afficher_menu(etape)
    action = input("-> ").lower()

    # --- Explorer la route
    if action == "1":
        print("\nTu explores la route...")
        explorations += 1

        # Probabilit√© de rencontre
        if random.random() < 0.7:
            modele = random.choice(pool_sauvage_etape(etape if etape < 3 else 2))
            sauvage = Pokemon(modele.nom, modele.type, modele.pv_max, modele.attaques)

            print(f"Un {sauvage.nom} sauvage appara√Æt ! (Type {sauvage.type}, {sauvage.pv} PV)")

            while sauvage.est_vivant() and any(p.est_vivant() for p in equipe):
                print("\nQue veux-tu faire ?")
                print("1. Combattre")
                print("2. Capturer (Pok√© Ball)")
                print("3. Fuir")
                choix_action = input("-> ").lower()

                # --- Combat
                if choix_action == "1":
                    if not equipe[0].est_vivant():
                        print(f"\n{equipe[0].nom} est K.O. ! Il faut le soigner avant de combattre.")
                        continue
                    resultat = lancer_combat(equipe, sauvage, inventaire, choix_libre=True)

                    if resultat == "victoire":
                        # tu as vaincu le sauvage (gain d‚ÄôXP non g√©r√© ici)
                        break
                    elif resultat == "annule":
                        continue

                # --- Capture
                elif choix_action == "2":
                    pokeball = next((obj for obj in inventaire if obj.nom == "Pok√© Ball"), None)
                    if not pokeball:
                        print("Tu n‚Äôas plus de Pok√© Ball !")
                        continue

                    reussi = pokeball.utiliser(sauvage, inventaire)
                    if reussi:
                        if len(equipe) < 6:
                            equipe.append(sauvage)
                            print(f"‚ú® Tu as captur√© {sauvage.nom} !")
                        else:
                            print(f"Ton √©quipe est pleine. {sauvage.nom} a √©t√© envoy√© au PC.")
                        break
                    else:
                        print(f"{sauvage.nom} s‚Äôest √©chapp√© !")

                # --- Fuite
                elif choix_action == "3":
                    print("Tu fuis le combat en s√©curit√©.")
                    break

                else:
                    print("Choix invalide.")
        else:
            print("Rien √† signaler aujourd‚Äôhui.")

        # D√©blocage des ar√®nes par √©tape :
        # - etape 0 (d√©but) -> apr√®s 3 explorations, Pyronis devient dispo => on passe √† etape 1
        # - etape 1 -> Verdania devient dispo quand on a battu Pyronis (g√©r√© ailleurs)
        # - etape 2 -> Hydrolys devient dispo quand on a battu Verdania (g√©r√© ailleurs)
        if etape == 0 and explorations >= 3:
            print("\nüî• Tu arrives devant une immense tour enflamm√©e : l‚ÄôAr√®ne Pyronis !")
            etape = 1  # Pyronis accessible

    # --- Voir l‚Äô√©quipe
    elif action == "2":
        print(f"\n√âquipe de {dresseur} :")
        for i, p in enumerate(equipe, 1):
            etat = "K.O." if not p.est_vivant() else f"{p.pv}/{p.pv_max} PV"
            print(f"{i}. {p.nom} ({p.type}) - {etat}")
        print(f"Total : {len(equipe)}/6 Pok√©mon")

    # --- Voir inventaire
    elif action == "3":
        afficher_inventaire(inventaire)

    # --- Utiliser un objet (hors combat)
    elif action == "4":
        if not inventaire:
            print("\nTon sac est vide.")
            continue

        compteur = {}
        for item in inventaire:
            compteur[item.nom] = compteur.get(item.nom, 0) + 1
        objets_dispo = list(compteur.keys())

        print("\nüéí Objets disponibles :")
        for i, nom in enumerate(objets_dispo, 1):
            print(f"{i}. {nom} x{compteur[nom]}")

        choix = input("Quel objet veux-tu utiliser ? -> ").strip()
        if not choix.isdigit():
            print("Entr√©e invalide.")
            continue
        index = int(choix) - 1
        if index < 0 or index >= len(objets_dispo):
            print("Choix invalide.")
            continue

        nom_objet = objets_dispo[index]
        objet = next((it for it in inventaire if it.nom == nom_objet), None)

        print("\nSur quel Pok√©mon veux-tu utiliser l'objet ?")
        for i, p in enumerate(equipe, 1):
            print(f"{i}. {p.nom} ({p.pv}/{p.pv_max} PV)")

        choix_poke = input("-> ").strip()
        if not choix_poke.isdigit():
            print("Entr√©e invalide.")
            continue

        index_poke = int(choix_poke) - 1
        if 0 <= index_poke < len(equipe):
            cible = equipe[index_poke]
            # On passe la cible m√™me si l'objet ne la n√©cessite pas
            res = objet.utiliser(cible, inventaire)
            # certains objets renvoient None (ex: Potion), c'est ok
        else:
            print("Choix invalide.")

    # --- Aller √† l‚ÄôAr√®ne (selon l‚Äô√©tape)
    elif (action == "5" and arene_disponible_nom(etape) is not None):
        nom_arene = arene_disponible_nom(etape)

        if nom_arene == "Ar√®ne Pyronis":
            print("\nSouhaites-tu entrer dans l‚ÄôAr√®ne Pyronis ?")
            print("1. Oui, je veux d√©fier les dresseurs")
            print("2. Non, je pr√©f√®re continuer √† explorer")
            choix_arene = input("-> ").lower()

            if choix_arene == "1":
                print("\nTu entres dans l'Ar√®ne Pyronis...")
                arene_feu = creer_arene_feu()
                victoire = arene_feu.demarrer_defi(equipe, inventaire)
                explorations = 0

                if victoire:
                    print("\nüî• Tu sors victorieux de l'Ar√®ne Pyronis avec le Badge Flamme !")
                    # D√©bloquer la prochaine zone (Verdania) -> on revient au menu, mais etape passe √† 2
                    print("\nLa route s‚Äôouvre vers une for√™t luxuriante... L‚ÄôAr√®ne Verdania (Plante) t‚Äôattend !")
                    etape = 2
                else:
                    print("\nTu quittes l‚Äôar√®ne pour t‚Äôentra√Æner avant de revenir.")

            else:
                print("\nTu d√©cides de ne pas entrer et continues ton aventure.")

        elif nom_arene == "Ar√®ne Verdania":
            print("\nSouhaites-tu entrer dans l‚ÄôAr√®ne Verdania ?")
            print("1. Oui, je veux d√©fier les dresseurs")
            print("2. Non, je pr√©f√®re continuer √† explorer")
            choix_arene = input("-> ").lower()

            if choix_arene == "1":
                print("\nTu entres dans l'Ar√®ne Verdania...")
                arene_plante = creer_arene_plante()
                victoire = arene_plante.demarrer_defi(equipe, inventaire)
                explorations = 0

                if victoire:
                    print("\nüåø Tu sors victorieux de l'Ar√®ne Verdania avec le Badge Verdure !")
                    # D√©bloquer Hydrolys
                    print("\nUn sentier longeant une rivi√®re te m√®ne √† l‚ÄôAr√®ne Hydrolys (Eau) !")
                    etape = 3
                else:
                    print("\nTu quittes l‚Äôar√®ne pour t‚Äôentra√Æner avant de revenir.")

            else:
                print("\nTu d√©cides de ne pas entrer et continues ton aventure.")

        elif nom_arene == "Ar√®ne Hydrolys":
            print("\nSouhaites-tu entrer dans l‚ÄôAr√®ne Hydrolys ?")
            print("1. Oui, je veux d√©fier les dresseurs")
            print("2. Non, je pr√©f√®re continuer √† explorer")
            choix_arene = input("-> ").lower()

            if choix_arene == "1":
                print("\nTu entres dans l'Ar√®ne Hydrolys...")
                arene_eau = creer_arene_eau()
                victoire = arene_eau.demarrer_defi(equipe, inventaire)
                explorations = 0

                if victoire:
                    print("\nüíß Tu sors victorieux de l'Ar√®ne Hydrolys avec le Badge Cascade !")
                    print("\nüèÜ F√©licitations ! Tu as remport√© les trois premiers badges de la Ligue !")
                    print("Tu peux continuer √† explorer, entra√Æner ton √©quipe, et compl√©ter ton Pok√©dex !")
                    # etape > 3 => plus d'ar√®nes, on garde l'exploration
                    etape = 4
                else:
                    print("\nTu quittes l‚Äôar√®ne pour t‚Äôentra√Æner avant de revenir.")

            else:
                print("\nTu d√©cides de ne pas entrer et continues ton aventure.")

        else:
            print("\nAucune ar√®ne accessible pour le moment.")

    # --- Quitter le jeu
    elif (action == "5" and arene_disponible_nom(etape) is None) or (action == "6" and arene_disponible_nom(etape) is not None):
        print("\nMerci d‚Äôavoir jou√©, √† bient√¥t üëã")
        break

    else:
        print("Choix invalide, r√©essaie.")
